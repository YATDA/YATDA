const path = require("path");
const HtmlWebpackPluginConfig = require("html-webpack-plugin");
const CopyWebpackPlugin = require('copy-webpack-plugin');

module.exports = {
  // the starting point from which webpack will compile our JavaScript into one file
  entry: "./dev/index.js",

  /**
   * This is the output generated by webpack - one file with a hash appended to it
   */ 
  output: {
    filename: "bundle.[hash].js",
    path: path.resolve(__dirname, "dist"),
  },

  /**
   * These are all of the modules that webpack uses to compile our code. Webpack by
   * itself doesn't understand anything but JavaScript, so we use various loaders to
   * tell Webpack what to do with various files.
   */ 
  module: {
    loaders: [
      /**
       * This loader looks that all code that fits the test (RegEx) 
       * and passes it through babel.
       */
      { test: /\.jsx?/, loader: "babel-loader", exclude: /node_modules/ },
    ],
  },
  
  // This is a list of filetypes that should be resolved by webpack
  resolve: {
    extensions: [".js", ".jsx"],
  },

  /**
   * Plugins can be written to do just about anything but usually they handle things
   * that the loaders do not.
   */
  plugins: [
    /**
     * The HtmlWebpackPlugin creates an HTML file based off of a template. The template is
     * optional but gives more flexibility as to what your HTML looks like
     */ 
    new HtmlWebpackPluginConfig({
      title: "Yet Another To Do App",
      hash: true,
      template: "./dev/index.html"
    }),

    /**
     * This plugin just copies files from one directory to another. We want to keep all of our development
     * files in one folder and distribution files in the dist folder, so some static assets need to be copied over.
     */
    new CopyWebpackPlugin([
      {
        from: 'dev/favicon.ico', 
        to: 'dist/favicon.ico',
      }
    ])
  ],
  devServer: {
    port: 3000
  }
};